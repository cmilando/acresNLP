#adjust based on your computer
#my_dir <- "/Users/alliej/Library/CloudStorage/OneDrive-BostonUniversity/ACRES NLP/acresNLP/"
my_dir <- "/Users/cwm/Documents/GitHub/acresNLP/"
create_df <- function(filename){
data <- read_delim(filename)
return(data)
}
#combined table missing all arlington/belmont and some chelsea/everett
combined_table <- create_df(paste0(my_dir, "combined_output_v4.tsv"))
combined_table <- combined_table %>% clean_names()
#combined table missing all arlington/belmont and some chelsea/everett
combined_table <- create_df(paste0(my_dir, "combined_output_v5.tsv"))
combined_table <- combined_table %>% clean_names()
combined_table$town_name <- gsub("url\\d+|\\d+|\\.json", "",
combined_table$file_name)
combined_table$town_name <- toupper(combined_table$town_name)
#combined table missing all arlington/belmont and some chelsea/everett
combined_table <- create_df(paste0(my_dir, "combined_output_v5.tsv"))
combined_table <- combined_table %>% clean_names()
combined_table$town_name <- gsub("url\\d+|\\d+|\\.json", "",
combined_table$file_name)
combined_table$town_name <- toupper(combined_table$town_name)
mystic_towns_list = c("Burlington", "Lexington", "Belmont", "Watertown",
"Arlington", "Winchester", "Woburn", "Reading",
"Stoneham", "Medford", "Somerville", "Cambridge",
"Boston", "Charlestown", "Everett", "Malden", "Melrose",
"Wakefield", "Chelsea", "Revere", "Winthrop", "Wilmington")
##
combined_table <- combined_table %>%
mutate(is_ACRES_town = (most_common_town %in% tolower(mystic_towns_list)),
is_MASS = (most_common_state == 'massachusetts'))
# duplicated
combined_table$duplicated = duplicated(combined_table$first100words)
combined_table <- combined_table %>%
mutate(pass_checks2 = (
duplicated == F &
is_ACRES_town == T &
is_MASS == T &
has_climate == 1 &
has_community == 1
))
write_tsv(combined_table, 'combined_table_v5.tsv')
combined_table
table(combined_table$most_common_town, combined_table$pass_checks2)
table(combined_table$pass_checks2)
mancx <- read.csv(paste0(my_dir, "manual_checks_2.csv"), header = T,
sep = "|")[,c('Manual.Check', "file_name")]
head(mancx)
combined_table <- combined_table %>% left_join(mancx)
dim(combined_table)
data.frame(head(combined_table))
combined_table <- combined_table %>%
mutate(pass_checks2 = (
Manual.Check == 'INCLUDE' &
duplicated == F &
is_ACRES_town == T &
is_MASS == T &
has_climate == 1 &
has_community == 1
))
pass_checks <- combined_table %>%
filter(pass_checks2) %>%
group_by(most_common_town) %>% tally()
pass_checks
write_tsv(pass_checks, 'pass_checks.tsv')
# ----------------------------------------------------------------------------
#90% or over for all towns
combined_table_relevant <- combined_table %>%
filter(pass_checks2)
dim(combined_table)
dim(combined_table_relevant)
hazard_by_town <- combined_table_relevant %>%
group_by(most_common_town) %>%
summarize(n = n(),
flood_avg = mean(flood_percent),
storm_avg = mean(storm_percent),
heat_avg = mean(heat_percent),
air_pollution_avg = mean(air_pollution_percent),
indoor_air_avg = mean(indoor_air_quality_percent),
chem_hazard_avg = mean(chemical_hazards_percent),
extreme_precip_avg = mean(extreme_precipitation_percent),
fire_avg = mean(fire_percent)
) %>%
mutate(mod_sum = rowSums(across(flood_avg:fire_avg)))
hazard_by_town$mod_sum
hazard_name_map = c(
"air_pollution_avg" = 'Air Pollution',
'chem_hazard_avg' = 'Chemical Hazards',
'extreme_precip_avg' = 'Extreme Precip.',
'fire_avg' = 'Fire',
'flood_avg' = 'Flood',
'heat_avg' = 'Heat',
'indoor_air_avg' = 'Indoor Air',
'storm_avg' = 'Storm'
)
capitalizeFirstLetter <- function(textVector) {
# Helper function to capitalize the first letter of a single string
singleCapitalize <- function(text) {
# Capitalize the first letter and leave the rest unchanged
paste0(toupper(substr(text, 1, 1)), substr(text, 2, nchar(text)))
}
# Apply the singleCapitalize function to each string in the vector
result <- sapply(textVector, singleCapitalize)
return(result)
}
# Example usage:
capitalizeFirstLetter(c("convert_text to camel_case", "another_example_here", "hello world"))
hazard_by_town
p1 <- hazard_by_town %>%
pivot_longer(cols = flood_avg:fire_avg) %>%
mutate(value = ifelse(value == 0, NA, value),
name_nice = hazard_name_map[name],
town_name_nice = capitalizeFirstLetter(most_common_town)) %>%
ggplot() +
geom_tile(aes(y = reorder(name_nice, value, na.rm = T),
x = town_name_nice,
fill = value),
color = 'white') +
scale_fill_binned(type = 'viridis',
name = 'Average proportion\nof per-document\nreferences',
limits = c(0, 100),
breaks = c(seq(20, 80, by = 20))) +
ylab('Hazard') + xlab('Town') +
scale_x_discrete(position = 'top') +
theme(axis.text.x = element_text(angle = 35, hjust = 0))
p1
outreach_by_town <- combined_table_relevant %>%
group_by(most_common_town) %>%
summarize(n = n(),
workshop_avg = mean(workshop_percent),
mapping_avg = mean(mapping_percent),
survey_avg = mean(survey_percent),
community_meeting_avg = mean(community_meeting_percent),
small_group_discussion_avg = mean(small_group_discussion_percent),
inform_avg = mean(inform_percent)
) %>%
mutate(mod_sum = rowSums(across(workshop_avg:inform_avg)))
## LOOK AT REVERE AND LEXINGTON
##View(outreach_by_town)
outreach_by_town$mod_sum
outreach_name_map = c(
"workshop_avg"= 'Workshop',
"mapping_avg" = 'Mapping',
"focus_group_avg" = 'Focus group',
"interview_avg"= "Interview",
"survey_avg" = "Survey",
"community_meeting_avg" = "Community meeting",
"small_group_meeting_avg" = "Small group meeting",
"information_avg" = "Information"
)
outreach_by_town
#combined table missing all arlington/belmont and some chelsea/everett
combined_table <- create_df(paste0(my_dir, "combined_output_v5.tsv"))
head(combined_table)
colnames(combined_table)
outreach_by_town <- combined_table_relevant %>%
group_by(most_common_town) %>%
summarize(n = n(),
workshop_avg = mean(workshop_percent),
mapping_avg = mean(mapping_percent),
survey_avg = mean(survey_percent),
conversation_avg = mean(conversation_percent),
community_meeting_avg = mean(community_meeting_percent),
small_group_discussion_avg = mean(small_group_discussion_percent),
inform_avg = mean(inform_percent)
) %>%
mutate(mod_sum = rowSums(across(workshop_avg:inform_avg)))
## LOOK AT REVERE AND LEXINGTON
##View(outreach_by_town)
outreach_by_town$mod_sum
outreach_name_map = c(
"workshop_avg"= 'Workshop',
"mapping_avg" = 'Mapping',
"survey_avg" = "Survey",
"conversation_avg"= "Conversation",
"community_meeting_avg" = "Community meeting",
"small_group_meeting_avg" = "Small group meeting",
"information_avg" = "Information"
)
p2 <- outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg) %>%
mutate(value = ifelse(value == 0, NA, value),
name_nice = outreach_name_map[name],
town_name_nice = capitalizeFirstLetter(most_common_town)) %>%
ggplot() +
geom_tile(aes(y = reorder(name_nice, value, na.rm = T),
x = town_name_nice,
fill = value),
color = 'white') +
scale_fill_binned(type = 'viridis',
name = 'Average proportion\nof per-document\nreferences',
limits = c(0, 100),
breaks = c(seq(20, 80, by = 20))) +
ylab('Outreach') + xlab('Town') +
theme(axis.text.x = element_blank()) +
scale_x_discrete(position = 'top')
library(patchwork)
p1 + p2 +
plot_layout(ncol = 1, heights = c(0.52, 0.48),
axis_titles = 'collect_x',
guides = 'collect')
outreach_name_map = c(
"workshop_avg"= 'Workshop',
"mapping_avg" = 'Mapping',
"survey_avg" = "Survey",
"conversation_avg"= "Conversation",
"community_meeting_avg" = "Community meeting",
"small_group_meeting_avg" = "Small group meeting",
"inform_avg" = "Information"
)
p2 <- outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg) %>%
mutate(value = ifelse(value == 0, NA, value),
name_nice = outreach_name_map[name],
town_name_nice = capitalizeFirstLetter(most_common_town)) %>%
ggplot() +
geom_tile(aes(y = reorder(name_nice, value, na.rm = T),
x = town_name_nice,
fill = value),
color = 'white') +
scale_fill_binned(type = 'viridis',
name = 'Average proportion\nof per-document\nreferences',
limits = c(0, 100),
breaks = c(seq(20, 80, by = 20))) +
ylab('Outreach') + xlab('Town') +
theme(axis.text.x = element_blank()) +
scale_x_discrete(position = 'top')
library(patchwork)
p1 + p2 +
plot_layout(ncol = 1, heights = c(0.52, 0.48),
axis_titles = 'collect_x',
guides = 'collect')
outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg)
xyz <- outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg)
unique(xyz$name)
outreach_name_map = c(
"workshop_avg"= 'Workshop',
"mapping_avg" = 'Mapping',
"survey_avg" = "Survey",
"conversation_avg"= "Conversation",
"community_meeting_avg" = "Community meeting",
"small_group_discussion_avg" = "Small group meeting",
"inform_avg" = "Information"
)
p2 <- outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg) %>%
mutate(value = ifelse(value == 0, NA, value),
name_nice = outreach_name_map[name],
town_name_nice = capitalizeFirstLetter(most_common_town)) %>%
ggplot() +
geom_tile(aes(y = reorder(name_nice, value, na.rm = T),
x = town_name_nice,
fill = value),
color = 'white') +
scale_fill_binned(type = 'viridis',
name = 'Average proportion\nof per-document\nreferences',
limits = c(0, 100),
breaks = c(seq(20, 80, by = 20))) +
ylab('Outreach') + xlab('Town') +
theme(axis.text.x = element_blank()) +
scale_x_discrete(position = 'top')
library(patchwork)
p1 + p2 +
plot_layout(ncol = 1, heights = c(0.52, 0.48),
axis_titles = 'collect_x',
guides = 'collect')
dev.size()
ggsave(filename = 'tileplot_v5.png',
width = 12.9/2, height = 6.67/2,
dpi = 600)
library(readr)
library(tidyverse)
library(ggforce)
library(janitor)
library(sf)
library(gtable)
library(grid)
library(gridExtra)
library(tigris)
library(leaflet)
### NOTES
# * STONEHAM HAS NO CLIMATE REPORTS
# * NOT A LOT OF ADJACENCY IN HAZARDS
#
# *
# * allison: for both hazards and outreach, for some towns the totals are < 100%
# * chad: expanding heat search terms and seeing if that changes things, manual search
# Needs:
# * Map
# * table of the heatmap with %s and n
# * REVERE AND LEXINGTON DON'T HAVE 100% in relevancy table
# * WHY ISNT HEAT MORE ** SEARCH TERMS
#
# * WHAT ABOUT THE COMMUNITY CONCERNS
# ----------------------------------------------------------------------------
#### create dataframe of hazard counts and proportions by town ####
#adjust based on your computer
#my_dir <- "/Users/alliej/Library/CloudStorage/OneDrive-BostonUniversity/ACRES NLP/acresNLP/"
my_dir <- "/Users/cwm/Documents/GitHub/acresNLP/"
create_df <- function(filename){
data <- read_delim(filename)
return(data)
}
#combined table missing all arlington/belmont and some chelsea/everett
combined_table <- create_df(paste0(my_dir, "combined_output_v5.tsv"))
colnames(combined_table)
combined_table <- combined_table %>% clean_names()
combined_table$town_name <- gsub("url\\d+|\\d+|\\.json", "",
combined_table$file_name)
combined_table$town_name <- toupper(combined_table$town_name)
mystic_towns_list = c("Burlington", "Lexington", "Belmont", "Watertown",
"Arlington", "Winchester", "Woburn", "Reading",
"Stoneham", "Medford", "Somerville", "Cambridge",
"Boston", "Charlestown", "Everett", "Malden", "Melrose",
"Wakefield", "Chelsea", "Revere", "Winthrop", "Wilmington")
##
combined_table <- combined_table %>%
mutate(is_ACRES_town = (most_common_town %in% tolower(mystic_towns_list)),
is_MASS = (most_common_state == 'massachusetts'))
# duplicated
combined_table$duplicated = duplicated(combined_table$first100words)
combined_table <- combined_table %>%
mutate(pass_checks2 = (
duplicated == F &
is_ACRES_town == T &
is_MASS == T &
has_climate == 1 &
has_community == 1
))
write_tsv(combined_table, 'combined_table_v5.tsv')
combined_table
table(combined_table$most_common_town, combined_table$pass_checks2)
table(combined_table$pass_checks2)
mancx <- read.csv(paste0(my_dir, "manual_checks_2.csv"), header = T,
sep = "|")[,c('Manual.Check', "file_name")]
head(mancx)
combined_table <- combined_table %>% left_join(mancx)
dim(combined_table)
data.frame(head(combined_table))
combined_table <- combined_table %>%
mutate(pass_checks2 = (
Manual.Check == 'INCLUDE' &
duplicated == F &
is_ACRES_town == T &
is_MASS == T &
has_climate == 1 &
has_community == 1
))
pass_checks <- combined_table %>%
filter(pass_checks2) %>%
group_by(most_common_town) %>% tally()
pass_checks
write_tsv(pass_checks, 'pass_checks.tsv')
# ----------------------------------------------------------------------------
#90% or over for all towns
combined_table_relevant <- combined_table %>%
filter(pass_checks2)
dim(combined_table)
dim(combined_table_relevant)
mystic_towns_list <- tolower(c("Burlington", "Lexington", "Belmont", "Watertown",
"Arlington", "Winchester", "Woburn", "Reading",
"Stoneham", "Medford", "Somerville", "Cambridge",
"Boston", "Charlestown", "Everett", "Malden", "Melrose",
"Wakefield", "Chelsea", "Revere", "Winthrop", "Wilmington"))
hazard_by_town <- combined_table_relevant %>%
group_by(most_common_town) %>%
summarize(n = n(),
flood_avg = mean(flood_percent),
storm_avg = mean(storm_percent),
heat_avg = mean(heat_percent),
air_pollution_avg = mean(air_pollution_percent),
indoor_air_avg = mean(indoor_air_quality_percent),
chem_hazard_avg = mean(chemical_hazards_percent),
extreme_precip_avg = mean(extreme_precipitation_percent),
fire_avg = mean(fire_percent)
) %>%
mutate(mod_sum = rowSums(across(flood_avg:fire_avg)))
mystic_towns_list_sub <- setdiff(mystic_towns_list,  unique(hazard_by_town$most_common_town))
hazard_by_town_blank <- data.frame(most_common_town = mystic_towns_list_sub,
n = rep(0, length(mystic_towns_list_sub)),
flood_avg = rep(NA, length(mystic_towns_list_sub)),
storm_avg = rep(NA, length(mystic_towns_list_sub)),
heat_avg = rep(NA, length(mystic_towns_list_sub)),
air_pollution_avg = rep(NA, length(mystic_towns_list_sub)),
indoor_air_avg = rep(NA, length(mystic_towns_list_sub)),
chem_hazard_avg = rep(NA, length(mystic_towns_list_sub)),
extreme_precip_avg = rep(NA, length(mystic_towns_list_sub)),
fire_avg = rep(NA, length(mystic_towns_list_sub)),
mod_sum = rep(0, length(mystic_towns_list_sub)))
hazard_by_town$mod_sum
hazard_by_town <- rbind(hazard_by_town, hazard_by_town_blank)
hazard_name_map = c(
"air_pollution_avg" = 'Air Pollution',
'chem_hazard_avg' = 'Chemical Hazards',
'extreme_precip_avg' = 'Extreme Precip.',
'fire_avg' = 'Fire',
'flood_avg' = 'Flood',
'heat_avg' = 'Heat',
'indoor_air_avg' = 'Indoor Air',
'storm_avg' = 'Storm'
)
capitalizeFirstLetter <- function(textVector) {
# Helper function to capitalize the first letter of a single string
singleCapitalize <- function(text) {
# Capitalize the first letter and leave the rest unchanged
paste0(toupper(substr(text, 1, 1)), substr(text, 2, nchar(text)))
}
# Apply the singleCapitalize function to each string in the vector
result <- sapply(textVector, singleCapitalize)
return(result)
}
# Example usage:
capitalizeFirstLetter(c("convert_text to camel_case", "another_example_here", "hello world"))
hazard_by_town
p1 <- hazard_by_town %>%
pivot_longer(cols = flood_avg:fire_avg) %>%
mutate(value = ifelse(value == 0, NA, value),
name_nice = hazard_name_map[name],
town_name_nice = paste0(capitalizeFirstLetter(most_common_town), " (", n, ")")) %>%
ggplot() +
geom_tile(aes(y = reorder(name_nice, value, na.rm = T),
x = town_name_nice,
fill = value),
color = 'white') +
scale_fill_binned(type = 'viridis',
name = 'Average proportion\nof per-document\nreferences',
limits = c(0, 100),
breaks = c(seq(20, 80, by = 20))) +
ylab('Hazard') + xlab('Town') +
scale_x_discrete(position = 'top') +
theme(axis.text.x = element_text(angle = 35, hjust = 0))
p1
outreach_by_town <- combined_table_relevant %>%
group_by(most_common_town) %>%
summarize(n = n(),
workshop_avg = mean(workshop_percent),
mapping_avg = mean(mapping_percent),
survey_avg = mean(survey_percent),
conversation_avg = mean(conversation_percent),
community_meeting_avg = mean(community_meeting_percent),
small_group_discussion_avg = mean(small_group_discussion_percent),
inform_avg = mean(inform_percent)
) %>%
mutate(mod_sum = rowSums(across(workshop_avg:inform_avg)))
## LOOK AT REVERE AND LEXINGTON
##View(outreach_by_town)
outreach_by_town$mod_sum
mystic_towns_list_sub <- setdiff(mystic_towns_list,  unique(outreach_by_town$most_common_town))
outreach_by_town_blank <- data.frame(most_common_town = mystic_towns_list_sub,
n = rep(0, length(mystic_towns_list_sub)),
workshop_avg = rep(NA, length(mystic_towns_list_sub)),
mapping_avg = rep(NA, length(mystic_towns_list_sub)),
survey_avg = rep(NA, length(mystic_towns_list_sub)),
conversation_avg = rep(NA, length(mystic_towns_list_sub)),
community_meeting_avg = rep(NA, length(mystic_towns_list_sub)),
small_group_discussion_avg = rep(NA, length(mystic_towns_list_sub)),
inform_avg = rep(NA, length(mystic_towns_list_sub)),
mod_sum = rep(0, length(mystic_towns_list_sub)))
outreach_by_town$mod_sum
outreach_by_town <- rbind(outreach_by_town, outreach_by_town_blank)
outreach_name_map = c(
"workshop_avg"= 'Workshop',
"mapping_avg" = 'Mapping',
"survey_avg" = "Survey",
"conversation_avg"= "Conversation",
"community_meeting_avg" = "Community meeting",
"small_group_discussion_avg" = "Small group meeting",
"inform_avg" = "Information"
)
xyz <- outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg)
unique(xyz$name)
p2 <- outreach_by_town %>%
pivot_longer(cols = workshop_avg:inform_avg) %>%
mutate(value = ifelse(value == 0, NA, value),
name_nice = outreach_name_map[name],
town_name_nice = paste0(capitalizeFirstLetter(most_common_town), " (", n, ")")) %>%
ggplot() +
geom_tile(aes(y = reorder(name_nice, value, na.rm = T),
x = town_name_nice,
fill = value),
color = 'white') +
scale_fill_binned(type = 'viridis',
name = 'Average proportion\nof per-document\nreferences',
limits = c(0, 100),
breaks = c(seq(20, 80, by = 20))) +
ylab('Outreach') + xlab('Town') +
theme(axis.text.x = element_blank()) +
#theme(axis.text.x = element_text(angle = 35, hjust = 0)) +
scale_x_discrete(position = 'top')
library(patchwork)
p1 + p2 +
plot_layout(ncol = 1, heights = c(0.52, 0.48),
axis_titles = 'collect_x',
guides = 'collect')
dev.size()
ggsave(filename = 'tileplot_v5.png',
#width = 12.9/2, height = 6.67/2,
width = 10.5/2, height = 5.9/2,
dpi = 600)
ggsave(filename = 'tileplot_v5.png',
width = 12.9, height = 6.67,
#width = 10.5/2, height = 5.9/2,
dpi = 600)
ggsave(filename = 'tileplot_v5.png',
width = 12.9/1.5, height = 6.671.5,
ggsave(filename = 'tileplot_v5.png',
width = 12.9/1.5, height = 6.67/1.5,
#width = 10.5/2, height = 5.9/2,
dpi = 600)
